"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = attacher;

var _unistUtilVisit = _interopRequireDefault(require("unist-util-visit"));

var _extend = _interopRequireDefault(require("extend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const behaviours = {
  prepend: 'unshift',
  append: 'push'
};
const contentDefaults = {
  type: 'element',
  tagName: 'span',
  properties: {
    className: ['icon', 'icon-link']
  }
};
const defaults = {
  behaviour: 'prepend',
  content: contentDefaults
};

function attacher(opts = {}) {
  let {
    linkProperties,
    behaviour,
    content
  } = _objectSpread({}, defaults, opts);

  let method;
  let hChildren;

  if (behaviour === 'wrap') {
    method = wrap;
  } else {
    method = inject;
    hChildren = Array.isArray(content) ? content : [content];

    if (!linkProperties) {
      linkProperties = {
        ariaHidden: 'true'
      };
    }
  }

  return ast => (0, _unistUtilVisit.default)(ast, 'heading', visitor);

  function visitor(node) {
    const {
      data
    } = node;
    const id = data && data.hProperties && data.hProperties.id;

    if (id) {
      method(node, '#' + id);
    }
  }

  function inject(node, url) {
    node.children[behaviours[behaviour]]({
      type: 'link',
      url,
      title: null,
      children: [],
      data: {
        hProperties: (0, _extend.default)(true, {}, linkProperties),
        hChildren: (0, _extend.default)(true, [], hChildren)
      }
    });
  }

  function wrap(node, url) {
    node.children = [{
      type: 'link',
      url,
      title: null,
      children: node.children,
      data: {
        hProperties: (0, _extend.default)(true, {}, linkProperties)
      }
    }];
  }
}

module.exports = exports.default;