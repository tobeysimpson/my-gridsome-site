{"remainingRequest":"/Users/tobeysimpson/my-gridsome-site/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/tobeysimpson/my-gridsome-site/node_modules/gridsome/app/utils/helpers.js","dependencies":[{"path":"/Users/tobeysimpson/my-gridsome-site/node_modules/gridsome/app/utils/helpers.js","mtime":1554172634699},{"path":"/Users/tobeysimpson/my-gridsome-site/node_modules/cache-loader/dist/cjs.js","mtime":1554172634942},{"path":"/Users/tobeysimpson/my-gridsome-site/node_modules/babel-loader/lib/index.js","mtime":1553985690434}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nvar publicPath = process.env.PUBLIC_PATH;\nexport function unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\nexport function url(string) {\n  return \"\".concat(publicPath).concat(string).replace(/\\/+/g, '/');\n}\nvar re = new RegExp(\"^\".concat(publicPath));\nvar replacement = publicPath !== '/' ? '' : '/';\nexport function stripPathPrefix(string) {\n  return string.replace(re, replacement);\n}",{"version":3,"sources":["/Users/tobeysimpson/my-gridsome-site/node_modules/gridsome/app/utils/helpers.js"],"names":["publicPath","process","env","PUBLIC_PATH","unslash","string","replace","url","re","RegExp","replacement","stripPathPrefix"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA/B;AAEA,OAAO,SAASC,OAAT,CAAkBC,MAAlB,EAA0B;AAC/B,SAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACD;AAED,OAAO,SAASC,GAAT,CAAcF,MAAd,EAAsB;AAC3B,SAAO,UAAGL,UAAH,SAAgBK,MAAhB,EAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,GAAzC,CAAP;AACD;AAED,IAAME,EAAE,GAAG,IAAIC,MAAJ,YAAeT,UAAf,EAAX;AACA,IAAMU,WAAW,GAAGV,UAAU,KAAK,GAAf,GAAqB,EAArB,GAA0B,GAA9C;AACA,OAAO,SAASW,eAAT,CAA0BN,MAA1B,EAAkC;AACvC,SAAOA,MAAM,CAACC,OAAP,CAAeE,EAAf,EAAmBE,WAAnB,CAAP;AACD","sourcesContent":["const publicPath = process.env.PUBLIC_PATH\n\nexport function unslash (string) {\n  return string.replace(/^\\/+|\\/+$/g, '')\n}\n\nexport function url (string) {\n  return `${publicPath}${string}`.replace(/\\/+/g, '/')\n}\n\nconst re = new RegExp(`^${publicPath}`)\nconst replacement = publicPath !== '/' ? '' : '/'\nexport function stripPathPrefix (string) {\n  return string.replace(re, replacement)\n}\n"]}]}